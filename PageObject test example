import org.junit.Assert;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
 
public class RegistrationPage {
 
    private static String URL_MATCH = "registration";
 
    private WebDriver driver;
 
    // Логин
    @FindBy(id = "userLogin")
    private WebElement login;
 
    // Пароль
    @FindBy(id = "regPassword")
    private WebElement password;
 
    //Пароль подтверждение
    @FindBy(id = "passwordConfirmation")
    private WebElement passwordConfirm;
 
    //E-mail
    @FindBy(id = "UserEmail")
    private WebElement email;
 
    //Кнопка зарегистрировать
    @FindBy(id = "submitRegistration")
    private WebElement bSubmitRegister;
 
    //Сообщение об ошибке
    @FindBy(id = "error-message")
    private WebElement registerError;
 
    public RegistrationPage(WebDriver driver) {
        // проверить, что вы находитесь на верной странице
        if (!driver.getCurrentUrl().contains(URL_MATCH)) {
                    throw new IllegalStateException(
                        "This is not the page you are expected"
                        );
        }
 
        PageFactory.initElements(driver, this);
        this.driver = driver;
    }
 
    //Регистрация пользователя @param user - {@link User}
    private void registerUser(User user) {
        System.out.println(driver.getTitle());
        login.sendKeys(user.login);
        password.sendKeys(user.password);
        passwordConfirm.sendKeys(user.passwordConfirmation);
        email.sendKeys(user.email);
 
        bSubmitRegister.click();
    }
 
    /*
     * Успешная регистрация пользователя
     * @param user - {@link User}
     * @return {@link HomePage}
     */
    public HomePage registerUserSuccess(User user) {
        registerUser(user);
        return new HomePage(driver);
    }
 
    /*
     * Неуспешная регистрация
     * @param user - {@link User}
     * @return {@link RegistrationPage}
     */
    public RegistrationPage registerUserError(User user) {
        registerUser(user);
        return new RegistrationPage(driver);
    }
 
    /*
     * Проверить сообщение об ошибке
     * @param user - {@link User}
     * @return {@link RegistrationPage}
     */
    public RegistrationPage checkErrorMessage(String errorMessage) {
        Assert.assertTrue("Error message should be present", 
                        registerError.isDisplayed());
        Assert.assertTrue("Error message should contains " + errorMessage, 
                        registerError.getText().contains(errorMessage));
        return this;
    }
}

Вызов методов страницы регистрации в тесте:

@Test
public void registerUserTest() {
    driver.get("http://HOST_NAME/registration");
    User user = User.createValidUser();
    user.email = "not_valid_email";
 
    RegistrationPage registrationPage =  new RegistrationPage(driver);
    registrationPage
        .registerUserError(user)
        .checkErrorMessage(errorMessage)
        ;
 
    user = User.createValidUser();
 
    registrationPage
        .registerUserSuccess(user)
        // ...
        // вызов методов HomePage 
        ;
}
